#!/usr/bin/env ruby
HOST = "google.com"
PING_COUNT = 10
LATENCY_THRESHOLD = 500 # in milliseconds
PACKET_LOSS_THRESHOLD = 20 # in percent

class LatencyNotifier
  def initialize(host)
    @host = host
  end

  # Ping host, tweet if:
  # - Packet loss exceeds threshold
  # - Average latency exceeds threshold
  def probe
    packet_loss, latency = analyze(ping(@host))
    puts "Packet Loss: #{packet_loss}%"
    puts "Latency: #{packet_loss}ms"
    if packet_loss >= PACKET_LOSS_THRESHOLD
      alert "Packet loss to #{@host} is #{packet_loss}% (> #{PACKET_LOSS_THRESHOLD}%)"
    elsif latency >= LATENCY_THRESHOLD
      alert "Latency to #{@host} is #{latency}ms (> #{LATENCY_THRESHOLD}ms)"
    end
  end

  private

  def ping(host)
    `ping -q -c #{PING_COUNT} #{host}`
  end

  # PING google.com (72.14.204.147): 56 data bytes
  #
  # --- google.com ping statistics ---
  # 2 packets transmitted, 2 packets received, 0.0% packet loss
  # round-trip min/avg/max/stddev = 21.264/22.755/24.247/1.492 ms
  def analyze(ping_data)
    packet_loss = ping_data.scan(/(\d+\.\d+)%/).flatten.first.to_f
    latency  = ping_data.scan(/\d+\.\d+/)[1].to_f
    [packet_loss, latency]
  end

  def alert(message)
    tweet(message)
    growl(message)
  end

  def tweet(message)
    %x{tweetlog "#{message}"}
  end

  def growl(message)
    application       = "Latency Notifier"
    icon_application  = 'Network Utility'
    growl_command = "growlnotify -a '#{icon_application}' -n '#{application}' -t '#{application}' -m '#{message}' -p 'Emergency'"
    system(growl_command)
  end
end

LatencyNotifier.new(HOST).probe